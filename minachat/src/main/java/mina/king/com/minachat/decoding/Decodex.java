package mina.king.com.minachat.decoding;import org.apache.mina.core.buffer.IoBuffer;import org.apache.mina.core.session.AttributeKey;import org.apache.mina.core.session.IoSession;import org.apache.mina.filter.codec.CumulativeProtocolDecoder;import org.apache.mina.filter.codec.ProtocolDecoderOutput;import org.json.JSONObject;import java.nio.charset.Charset;import java.nio.charset.CharsetDecoder;import mina.king.com.minachat.model.MsgCodeModel;/** * 解码类 * @author Administrator * */public class Decodex extends CumulativeProtocolDecoder {    CharsetDecoder charset = Charset.forName("utf-8").newDecoder();            private final AttributeKey CONTEXT = new AttributeKey(this.getClass(), "context");     @Override    protected boolean doDecode(IoSession ioSession, IoBuffer buff, ProtocolDecoderOutput out) throws Exception {         // 取出context           Context ctx = this.getContext(ioSession);         int length = ctx.getLength();// 数据总长度           IoBuffer buffer = ctx.getBuffer();// 保存数据的buffer         int matchLength = ctx.getMatchLength();// 目前已经发送的数据的总长度          if (0 == length) {// 第一次取值         	 byte[] arr = buff.array();        	 int headLength = buff.getInt();                          ctx.getCdModelMsg().setHeadLength(headLength);             String content = buff.getString(headLength, charset);             ctx.getCdModelMsg().setHeader(content);             length = buff.remaining();             matchLength = buff.remaining();             ctx.setLength(length);         } else {             matchLength += buff.remaining();           }         //上一次读取长度         ctx.setMatchLength(matchLength);         JSONObject paramJSON = new JSONObject(ctx.getCdModelMsg().getHeader());           if (paramJSON.getInt("bodyLength") > matchLength) {// 如果buff中还有数据	        	 ctx.setPreLength(buff.remaining());	             buffer.put(buff);// 添加到保存数据的buffer中  	             return false;         }else {        	 buffer.put(buff);        	 buffer.flip();        	 byte[] b = new byte[buffer.remaining()];               buffer.get(b);             ctx.getCdModelMsg().setBody(b);             out.write(ctx.getCdModelMsg());             ioSession.setAttribute(CONTEXT, null);             System.out.println("解码完成.......");           }         return false;    }        public class Context {          public IoBuffer buffer;          public int length = 0;          public int matchLength = 0;          public int yh = 0;        public MsgCodeModel cdModelMsg;        public int preLength = 0;                public int getPreLength() {			return preLength;		}		public void setPreLength(int preLength) {			this.preLength = preLength;		}		public MsgCodeModel getCdModelMsg() {			return cdModelMsg;		}		public void setCdModelMsg(MsgCodeModel cdModelMsg) {			this.cdModelMsg = cdModelMsg;		}		public Context() {              this.buffer = IoBuffer.allocate(1024).setAutoExpand(true);          }            public int getMatchLength() {              return matchLength;          }            public void setMatchLength(int matchLength) {              this.matchLength = matchLength;          }            public IoBuffer getBuffer() {              return buffer;          }            public void setBuffer(IoBuffer buffer) {              this.buffer = buffer;          }            public int getLength() {              return length;          }            public void setLength(int length) {              this.length = length;          }		public int getYh() {			return yh;		}		public void setYh(int yh) {			this.yh = yh;		}             }        public Context getContext(IoSession session) {          Context ctx = (Context) session.getAttribute(CONTEXT);          if (ctx == null) {              ctx = new Context();              ctx.setCdModelMsg(new MsgCodeModel());            session.setAttribute(CONTEXT, ctx);        }          return ctx;      }  }